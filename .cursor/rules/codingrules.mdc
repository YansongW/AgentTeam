---
description: 
globs: 
alwaysApply: true
---
# Multi-Agent 协作平台 - 编码规范

本文档整合了项目的编码规范和开发指南，确保所有团队成员遵循统一标准，提高代码质量和开发效率。

## 项目概述

Multi-Agent协作平台是一个革命性的AI解决方案，允许用户创建、管理和利用AI代理来协同完成各种任务。该平台支持娱乐场景（如虚拟陪伴、对话）和商业场景（如App开发、数据分析）。

@README.md

## 开发流程

每位开发人员必须严格遵循以下开发流程：

1. **需求分析**
   - 详细阅读需求文档，理解功能要求
   - 与产品经理确认需求细节和边界条件

2. **任务分解**
   - 将功能需求分解为小型可实现的任务
   - 在项目管理工具中创建相应的任务卡片
   - 参考 @Task_list.md 了解当前项目任务分解

3. **分支创建**
   - 从develop分支创建新的功能分支：`feature/功能名`或修复分支：`fix/问题描述`

4. **编码实现**
   - 严格遵循代码风格规范编写代码
   - 实现单元测试，确保测试覆盖率达标

5. **自测与代码审查**
   - 在提交PR前完成功能自测
   - 创建Pull Request请求代码审查
   - 至少需要一位团队成员审查并批准

@开发规范.md

## 代码风格

### 命名规范
- **变量和函数**：使用小写字母+下划线（如 `get_user_info`）
- **类名**：使用驼峰式（如 `UserManager`）
- **常量**：全大写+下划线（如 `MAX_RETRY_COUNT`）
- **文件名**：使用小写字母+下划线（如 `user_manager.py`）

### 代码格式
- **缩进**：统一使用4个空格，不使用Tab
- **行长度**：
  - Python：每行不超过80个字符
  - JavaScript：每行不超过100个字符
- **函数和类的大小**：
  - 单个函数不超过50行
  - 类不超过300行
- **格式化工具**：
  - Python：使用Black自动格式化
  - JavaScript：使用Prettier自动格式化

### 注释规范
- **文件头注释**：包含文件描述、作者、创建日期
- **函数/方法注释**：说明功能、参数、返回值和异常
- **复杂逻辑处**：添加行内注释解释为什么这样做

## 版本控制

### 分支管理
- **主分支**：
  - `main`：生产环境代码，受保护不可直接提交
  - `develop`：开发集成分支，也受保护
- **功能分支**：`feature/功能名`（如 `feature/add-agent-api`）
- **修复分支**：`fix/问题描述`（如 `fix/login-timeout`）
- **发布分支**：`release/版本号`（如 `release/v1.2.0`）

### 提交规范
- 提交消息格式：`[类型]: 描述`
- 类型包括：
  - `[feat]`：新功能
  - `[fix]`：修复bug
  - `[docs]`：文档更新
  - `[style]`：代码风格调整（不影响功能）
  - `[refactor]`：代码重构
  - `[test]`：测试相关
  - `[chore]`：构建过程或辅助工具变动
  - `[perf]`：性能优化

## 测试要求

- 总体代码覆盖率不低于80%
- 核心功能和关键业务逻辑覆盖率不低于90%
- 使用适当的测试框架（Python：pytest，JavaScript：Jest）
- 编写边界测试，覆盖边界条件和异常情况

## 文档要求

- 使用文档字符串记录代码功能
- 使用Swagger/OpenAPI记录API接口
- 代码变更时同步更新相关文档
- 维护`CHANGELOG.md`记录版本变更

## 安全规范

- 防止常见安全漏洞（SQL注入、XSS、CSRF等）
- 敏感信息不得硬编码在代码中
- 敏感数据必须加密存储
- API通信使用HTTPS

## 开发优先级

参照Task_list.md中的优先级划分，按照以下模块顺序开发：
1. 登录系统
2. Chatbot界面
3. Agent
4. Group
5. 项目展板
6. 设置

优先完成标记为"高"优先级的任务，这些是MVP上线的最基本需求。

## 项目结构

- `chatbot_platform/` - Django项目主目录（将更名为agent_platform）
- `users/` - 用户认证和管理应用
- `agents/` - 代理创建和管理应用
- `messaging/` - 消息处理应用
- `groups/` - 群组管理应用
- `static/` - 静态资源
- `templates/` - HTML模板
- `docs/` - 项目文档

## 技术栈

- **后端**: Django (Python)
- **数据库**: SQLite (开发环境) / PostgreSQL (生产环境)
- **前端**: React
- **消息队列**: RabbitMQ（规划中）
- **缓存**: Redis（规划中）
- **容器化**: Docker（规划中） 